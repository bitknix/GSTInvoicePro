version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:13-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./backend/.env
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_DB=${DB_NAME:-gstinvoicepro}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gstinvoicepro-network

  # Backend API Service
  backend:
    build: ./backend
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    restart: always
    volumes:
      - ./backend:/app
      - /app/venv
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db/${DB_NAME:-gstinvoicepro}
      - DB_HOST=db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - gstinvoicepro-network

  # Frontend Web Service
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: always
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    networks:
      - gstinvoicepro-network

volumes:
  postgres_data:
    name: gstinvoicepro-postgres-data

networks:
  gstinvoicepro-network:
    name: gstinvoicepro-network
    driver: bridge 